"""Test the server of Geckoboard data."""

import json
from twisted.trial import unittest
from twisted.internet.defer import inlineCallbacks, succeed
from vumidash.graphite_client import GraphiteClient


TESTDATA_RAW = """[{"target": "foo.count.sum", "datapoints": [
        [16.0, 1362204060], [null, 1362204120], [3.0, 1362204180],
        [6.0, 1362204240], [1.0, 1362204300], [1.0, 1362204360],
        [1.0, 1362204420], [1.0, 1362204480], [1.0, 1362204540],
        [2.0, 1362204600], [1.0, 1362204660], [null, 1362204720],
        [1.0, 1362204780], [1.0, 1362204840], [5.0, 1362204900],
        [90.0, 1362204960], [84.0, 1362205020], [85.0, 1362205080],
        [126.0, 1362205140], [76.0, 1362205200], [74.0, 1362205260],
        [85.0, 1362205320], [86.0, 1362205380], [102.0, 1362205440],
        [82.0, 1362205500], [84.0, 1362205560], [58.0, 1362205620],
        [78.0, 1362205680], [91.0, 1362205740], [75.0, 1362205800],
        [73.0, 1362205860], [100.0, 1362205920], [87.0, 1362205980],
        [81.0, 1362206040], [1.0, 1362206100], [73.0, 1362206160],
        [82.0, 1362206220], [105.0, 1362206280], [85.0, 1362206340],
        [99.0, 1362206400], [86.0, 1362206460], [85.0, 1362206520],
        [98.0, 1362206580], [100.0, 1362206640], [74.0, 1362206700],
        [85.0, 1362206760], [95.0, 1362206820], [81.0, 1362206880],
        [98.0, 1362206940], [88.0, 1362207000], [63.0, 1362207060],
        [84.0, 1362207120], [94.0, 1362207180], [89.0, 1362207240],
        [86.0, 1362207300], [89.0, 1362207360], [85.0, 1362207420],
        [96.0, 1362207480], [88.0, 1362207540], [80.0, 1362207600],
        [84.0, 1362207660], [96.0, 1362207720], [83.0, 1362207780],
        [103.0, 1362207840], [98.0, 1362207900], [111.0, 1362207960],
        [182.0, 1362208020], [159.0, 1362208080], [122.0, 1362208140],
        [128.0, 1362208200], [160.0, 1362208260], [133.0, 1362208320],
        [11.0, 1362208380], [3.0, 1362208440], [53.0, 1362208500],
        [72.0, 1362208560], [82.0, 1362208620], [85.0, 1362208680],
        [95.0, 1362208740], [74.0, 1362208800], [74.0, 1362208860],
        [86.0, 1362208920], [82.0, 1362208980], [79.0, 1362209040],
        [87.0, 1362209100], [87.0, 1362209160], [88.0, 1362209220],
        [94.0, 1362209280], [101.0, 1362209340], [79.0, 1362209400],
        [85.0, 1362209460], [86.0, 1362209520], [92.0, 1362209580],
        [91.0, 1362209640], [84.0, 1362209700], [85.0, 1362209760],
        [116.0, 1362209820], [93.0, 1362209880], [98.0, 1362209940],
        [90.0, 1362210000], [104.0, 1362210060], [89.0, 1362210120],
        [110.0, 1362210180], [104.0, 1362210240], [83.0, 1362210300],
        [89.0, 1362210360], [93.0, 1362210420], [89.0, 1362210480],
        [105.0, 1362210540], [95.0, 1362210600], [98.0, 1362210660],
        [94.0, 1362210720], [99.0, 1362210780], [94.0, 1362210840],
        [88.0, 1362210900], [89.0, 1362210960], [85.0, 1362211020],
        [77.0, 1362211080], [80.0, 1362211140], [64.0, 1362211200]]}]"""

TESTDATA_SUMMARIZE = """[{"target": "foo.count.sum", "datapoints": [
        [35.0, 1362204000], [1206.0, 1362204900], [1230.0, 1362205800],
        [1295.0, 1362206700], [1553.0, 1362207600], [1239.0, 1362208500],
        [1406.0, 1362209400], [1358.0, 1362210300], [64.0, 1362211200]]}]"""


class TestGraphiteClient(unittest.TestCase):

    def setUp(self):
        self.testdata = json.loads(TESTDATA_RAW)
        self.client = GraphiteClient(None)
        get_data = lambda *a: succeed(self.testdata)
        self.client.make_graphite_request = get_data

    @inlineCallbacks
    def test_latest(self):
        data = yield self.client.get_latest("foo.count.sum", None, None, None)
        self.assertEqual(data, (16.0, 64.0))

    @inlineCallbacks
    def test_history_summary(self):
        summ = yield self.client.get_history("foo.count.sum", -7200, 0, 900)
        self.assertEqual(len(summ), 9)
        nosumm = yield self.client.get_history("foo.count.sum", -7200, 0, None)
        self.assertEqual(len(nosumm), 118)

        self.testdata = json.loads(TESTDATA_SUMMARIZE)
        theirs = yield self.client.get_history("foo.count.sum", -7200, 0, None)
        self.assertEqual(summ, theirs)
